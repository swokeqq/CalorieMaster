import telebot
import requests
import os
from dotenv import load_dotenv
from database import init_db, save_to_diary, get_diary_entries, translate  # –ò–º–ø–æ—Ä—Ç –∏–∑ database.py

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è --- #
load_dotenv()
bot = telebot.TeleBot(os.getenv('TELEGRAM_BOT_TOKEN'))

# API Keys
LOGMEAL_API_KEY = os.getenv('LOGMEAL_API_KEY')
LOGMEAL_ENDPOINT = "https://api.logmeal.com/v2/image/segmentation/complete"
LOGMEAL_HEADERS = {'Authorization': 'Bearer ' + LOGMEAL_API_KEY}

NUTRITIONIX_APP_ID = os.getenv('NUTRITIONIX_APP_ID')
NUTRITIONIX_APP_KEY = os.getenv('NUTRITIONIX_APP_KEY')
NUTRITIONIX_ENDPOINT = "https://trackapi.nutritionix.com/v2/natural/nutrients"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
user_food_data = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
init_db()


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ --- #

def analyze_photo_with_logmeal(file_path):
    """–†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –µ–¥—É –Ω–∞ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ Logmeal API"""
    try:
        with open(file_path, 'rb') as image_file:
            response = requests.post(
                LOGMEAL_ENDPOINT,
                files={'image': image_file},
                headers=LOGMEAL_HEADERS
            )
        data = response.json()
        return {'food_name': data['segmentation_results'][0]['recognition_results'][0]['name']}
    except Exception as e:
        return {'error': str(e)}


def get_nutritionix_data(food_name):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ö–ë–ñ–£ –∏–∑ Nutritionix"""
    headers = {
        'x-app-id': NUTRITIONIX_APP_ID,
        'x-app-key': NUTRITIONIX_APP_KEY,
        'Content-Type': 'application/json'
    }
    payload = {'query': food_name}

    response = requests.post(NUTRITIONIX_ENDPOINT, json=payload, headers=headers)
    if response.status_code != 200:
        return None

    food = response.json()['foods'][0]
    return {
        'calories': food.get('nf_calories', 0),
        'protein': food.get('nf_protein', 0),
        'fat': food.get('nf_total_fat', 0),
        'carbs': food.get('nf_total_carbohydrate', 0),
        # 'serving_weight': food.get('serving_weight_grams', 100)
        'serving_weight': food['serving_weight_grams']
    }


def calculate_nutrition(portion_grams, nutrition_data):
    """–ü–µ—Ä–µ—Å—á–µ—Ç –ö–ë–ñ–£ —Å —É—á–µ—Ç–æ–º –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–µ—Å–∞ –ø–æ—Ä—Ü–∏–∏"""
    if not nutrition_data or 'serving_weight' not in nutrition_data:
        return None

    # –ï—Å–ª–∏ –≤–µ—Å –ø–æ—Ä—Ü–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ 100–≥
    base_weight = nutrition_data.get('serving_weight', 100)

    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞
    coefficient = portion_grams / base_weight

    return {
        'calories': round(nutrition_data['calories'] * coefficient, 1),
        'protein': round(nutrition_data['protein'] * coefficient, 1),
        'fat': round(nutrition_data['fat'] * coefficient, 1),
        'carbs': round(nutrition_data['carbs'] * coefficient, 1)
    }


def format_nutrition_response(food_name, nutrition_data, portion_grams):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –ö–ë–ñ–£"""
    return (
        f"üçè {translate(food_name)}\n"
        f"‚öñÔ∏è –ü–æ—Ä—Ü–∏—è: {portion_grams}–≥\n\n"
        f"–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å:\n"
        f"üî• {nutrition_data['calories']} –∫–∫–∞–ª\n"
        f"ü•© {nutrition_data['protein']}–≥ –±–µ–ª–∫–æ–≤\n"
        f"ü•ë {nutrition_data['fat']}–≥ –∂–∏—Ä–æ–≤\n"
        f"üçû {nutrition_data['carbs']}–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤"
    )


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ --- #
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.reply_to(message, "üìå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ /diary –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–Ω–µ–≤–Ω–∏–∫–∞")


@bot.message_handler(commands=['diary'])
def show_diary(message):
    entries = get_diary_entries(message.chat.id)
    if not entries:
        bot.reply_to(message, "üçΩ –î–Ω–µ–≤–Ω–∏–∫ –ø—É—Å—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!")
        return

    response = ["üìÖ –í–∞—à –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è:"]
    for entry in entries[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
        response.append(
            f"\n{entry[2]} | {entry[3]} ({entry[4]}–≥)\n"
            f"üî• {entry[5]} –∫–∫–∞–ª | ü•© {entry[6]}–≥ –±–µ–ª–∫–æ–≤"
        )

    bot.reply_to(message, "\n".join(response))


@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    try:
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        photo_path = f"temp_{message.chat.id}.jpg"
        with open(photo_path, 'wb') as f:
            f.write(downloaded_file)

        # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –µ–¥—ã
        logmeal_data = analyze_photo_with_logmeal(photo_path)
        os.remove(photo_path)

        if 'error' in logmeal_data:
            raise Exception(logmeal_data['error'])

        food_name = logmeal_data['food_name']
        nutrition_data = get_nutritionix_data(food_name)

        if not nutrition_data:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
        user_food_data[message.chat.id] = {
            'food_name': food_name,
            'nutrition_per_100g': nutrition_data,
            'photo_id': message.photo[-1].file_id
        }

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–µ—Å –ø–æ—Ä—Ü–∏–∏
        bot.reply_to(message, f"üç¥ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {translate(food_name)}\n"
                              "üìù –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ø–æ—Ä—Ü–∏–∏ –≤ –≥—Ä–∞–º–º–∞—Ö:")

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        bot.register_next_step_handler(message, process_portion_size)

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


def process_portion_size(message):
    try:
        chat_id = message.chat.id
        portion_grams = float(message.text)

        if portion_grams <= 0:
            raise ValueError("–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        food_info = user_food_data.get(chat_id)
        if not food_info:
            raise Exception("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞")

        # –†–∞—Å—á–µ—Ç –ö–ë–ñ–£
        nutrition = calculate_nutrition(portion_grams, food_info['nutrition_per_100g'])

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = format_nutrition_response(
            food_info['food_name'],
            nutrition,
            portion_grams
        )

        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(telebot.types.InlineKeyboardButton(
            "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
            callback_data=f"save_{portion_grams}"
        ))

        bot.send_message(chat_id, response, reply_markup=markup)

    except ValueError:
        bot.reply_to(message, "üî¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 200)")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@bot.callback_query_handler(func=lambda call: call.data.startswith('save_'))
def handle_save(call):
    try:
        chat_id = call.message.chat.id
        portion_grams = float(call.data.split('_')[1])
        food_info = user_food_data.get(chat_id)

        if not food_info:
            bot.answer_callback_query(call.id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞")
            return

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        save_to_diary(
            chat_id=chat_id,
            food_name=food_info['food_name'],
            portion_grams=portion_grams,
            nutrition_data=calculate_nutrition(portion_grams, food_info['nutrition_per_100g']),
            photo_id=food_info['photo_id']
        )

        bot.answer_callback_query(call.id, "‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫!")
        bot.send_message(chat_id, "üçΩ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫ (/diary)")

    except Exception as e:
        bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


# --- –ó–∞–ø—É—Å–∫ --- #
if __name__ == '__main__':
    print("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.infinity_polling()