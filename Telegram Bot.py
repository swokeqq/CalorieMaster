import telebot
import requests
import os
from dotenv import load_dotenv
from database import (init_db, save_to_diary, get_diary_entries, get_dates_with_entries,
                      get_daily_summary, get_today_summary, delete_diary_entry,
                      translate_to_ru, translate_to_en)
from datetime import datetime, timedelta
import calendar

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è --- #
load_dotenv()
bot = telebot.TeleBot(os.getenv('TELEGRAM_BOT_TOKEN'))

# API Keys
DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY')
LOGMEAL_API_KEY = os.getenv('LOGMEAL_API_KEY')
LOGMEAL_ENDPOINT = "https://api.logmeal.com/v2/image/segmentation/complete"
LOGMEAL_HEADERS = {'Authorization': 'Bearer ' + LOGMEAL_API_KEY}

NUTRITIONIX_APP_ID = os.getenv('NUTRITIONIX_APP_ID')
NUTRITIONIX_APP_KEY = os.getenv('NUTRITIONIX_APP_KEY')
NUTRITIONIX_ENDPOINT = "https://trackapi.nutritionix.com/v2/natural/nutrients"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
user_food_data = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
init_db()

def create_main_keyboard():
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)

    row1 = [
        telebot.types.KeyboardButton("üçΩ –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è"),
        telebot.types.KeyboardButton("üìú –î–Ω–µ–≤–Ω–∏–∫"),
        telebot.types.KeyboardButton("‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")
    ]

    row2 = [
        telebot.types.KeyboardButton("üßë‚Äçüç≥ –ß—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å?"),
        telebot.types.KeyboardButton("‚ùì –ü–æ–º–æ—â—å")
    ]

    keyboard.add(*row1)
    keyboard.add(*row2)

    return keyboard


def analyze_photo_with_logmeal(file_path):
    """–†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –µ–¥—É –Ω–∞ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ Logmeal API —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏"""
    try:
        with open(file_path, 'rb') as image_file:
            response = requests.post(
                LOGMEAL_ENDPOINT,
                files={'image': image_file},
                headers=LOGMEAL_HEADERS
            )
        data = response.json()

        recognition_result = data['segmentation_results'][0]['recognition_results'][0]
        food_name = recognition_result['name']
        prob = recognition_result.get('prob', 1.0)

        return {
            'food_name': food_name,
            'prob': float(prob)
        }
    except Exception as e:
        return {'error': str(e)}


def get_nutritionix_data(food_name):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ö–ë–ñ–£ –∏–∑ Nutritionix"""
    headers = {
        'x-app-id': NUTRITIONIX_APP_ID,
        'x-app-key': NUTRITIONIX_APP_KEY,
        'Content-Type': 'application/json'
    }
    payload = {'query': food_name}

    response = requests.post(NUTRITIONIX_ENDPOINT, json=payload, headers=headers)
    if response.status_code != 200:
        return None

    food = response.json()['foods'][0]
    return {
        'calories': food.get('nf_calories', 0),
        'protein': food.get('nf_protein', 0),
        'fat': food.get('nf_total_fat', 0),
        'carbs': food.get('nf_total_carbohydrate', 0),
        'serving_weight': food.get('serving_weight_grams', 100)
    }


def calculate_nutrition(portion_grams, nutrition_data):
    """–ü–µ—Ä–µ—Å—á–µ—Ç –ö–ë–ñ–£ —Å —É—á–µ—Ç–æ–º –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–µ—Å–∞ –ø–æ—Ä—Ü–∏–∏"""
    if not nutrition_data or 'serving_weight' not in nutrition_data:
        return None

    base_weight = nutrition_data.get('serving_weight', 100)
    coefficient = portion_grams / base_weight

    return {
        'calories': round(nutrition_data['calories'] * coefficient, 1),
        'protein': round(nutrition_data['protein'] * coefficient, 1),
        'fat': round(nutrition_data['fat'] * coefficient, 1),
        'carbs': round(nutrition_data['carbs'] * coefficient, 1)
    }


def format_nutrition_response(food_name, nutrition_data, portion_grams):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –ö–ë–ñ–£"""
    return (
        f"üçè {translate_to_ru(food_name)}\n"
        f"‚öñÔ∏è –ü–æ—Ä—Ü–∏—è: {portion_grams}–≥\n\n"
        f"–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å:\n"
        f"üî• {nutrition_data['calories']} –∫–∫–∞–ª\n"
        f"ü•© {nutrition_data['protein']}–≥ –±–µ–ª–∫–æ–≤\n"
        f"ü•ë {nutrition_data['fat']}–≥ –∂–∏—Ä–æ–≤\n"
        f"üçû {nutrition_data['carbs']}–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤"
    )


def generate_calendar(year, month, marked_days=None):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –∂–∏—Ä–Ω—ã–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –¥–Ω–µ–π —Å –∑–∞–ø–∏—Å—è–º–∏"""
    if marked_days is None:
        marked_days = []

    cal = calendar.monthcalendar(year, month)
    month_name = calendar.month_name[month]

    keyboard = []

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º
    keyboard.append([
        telebot.types.InlineKeyboardButton(
            f"<< {month_name} {year} >>",
            callback_data="ignore"
        )
    ])

    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    keyboard.append([
        telebot.types.InlineKeyboardButton(day, callback_data="ignore")
        for day in week_days
    ])

    # –ù–µ–¥–µ–ª–∏
    for week in cal:
        week_buttons = []
        for day in week:
            if day == 0:
                week_buttons.append(
                    telebot.types.InlineKeyboardButton(" ", callback_data="ignore")
                )
            else:
                date_str = f"{year}-{month:02d}-{day:02d}"
                # –ñ–∏—Ä–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –¥–Ω–µ–π —Å –∑–∞–ø–∏—Å—è–º–∏
                day_text = f"*{day}*" if date_str in marked_days else str(day)
                week_buttons.append(
                    telebot.types.InlineKeyboardButton(
                        day_text,
                        callback_data=f"day_{date_str}"
                    )
                )
        keyboard.append(week_buttons)

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    prev_month = month - 1 if month > 1 else 12
    prev_year = year if month > 1 else year - 1
    next_month = month + 1 if month < 12 else 1
    next_year = year if month < 12 else year + 1

    keyboard.append([
        telebot.types.InlineKeyboardButton(
            "‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü",
            callback_data=f"month_{prev_year}_{prev_month}"
        ),
        telebot.types.InlineKeyboardButton(
            "‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü",
            callback_data=f"month_{next_year}_{next_month}"
        )
    ])

    return telebot.types.InlineKeyboardMarkup(keyboard)


def show_day_entries(chat_id, date_str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è"""
    entries = get_diary_entries(chat_id, date_str)
    summary = get_daily_summary(chat_id, date_str)

    if not entries:
        bot.send_message(chat_id, f"üçΩ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ {date_str}")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"üìÖ –î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è –∑–∞ {date_str}:\n\n"

    for entry in entries:
        message += (
            f"‚è∞ {entry[2].split()[1][:5]} | {entry[3]}\n"
            f"‚öñÔ∏è {entry[4]}–≥ | üî• {entry[5]} –∫–∫–∞–ª\n"
            f"ü•© {entry[6]}–≥ –±–µ–ª–∫–æ–≤ | ü•ë {entry[7]}–≥ –∂–∏—Ä–æ–≤ | üçû {entry[8]}–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤\n\n"
        )

    message += (
        f"üìä –ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å:\n"
        f"üî• {summary['calories']:.0f} –∫–∫–∞–ª\n"
        f"ü•© {summary['protein']:.1f}–≥ –±–µ–ª–∫–æ–≤\n"
        f"ü•ë {summary['fat']:.1f}–≥ –∂–∏—Ä–æ–≤\n"
        f"üçû {summary['carbs']:.1f}–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
    markup = telebot.types.InlineKeyboardMarkup()
    for entry in entries:
        markup.add(
            telebot.types.InlineKeyboardButton(
                f"‚ùå –£–¥–∞–ª–∏—Ç—å {entry[3][:15]}...",
                callback_data=f"delete_{entry[0]}"
            )
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é"
    markup.add(
        telebot.types.InlineKeyboardButton(
            "üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é",
            callback_data="back_to_calendar"
        )
    )

    bot.send_message(chat_id, message, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_'))
def handle_delete_entry(call):
    try:
        entry_id = int(call.data.split('_')[1])
        delete_diary_entry(entry_id, call.message.chat.id)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.answer_callback_query(call.id, "‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞!")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        original_text = call.message.text
        date_str = original_text.split("–∑–∞ ")[1].split(":")[0].strip()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
        show_day_entries(call.message.chat.id, date_str)

    except Exception as e:
        bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    keyboard = create_main_keyboard()
    bot.reply_to(message,
        "üçè –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Calorie Master!\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "1. üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n"
        "2. ‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç –≤—Ä—É—á–Ω—É—é\n"
        "3. üìÖ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )


def generate_recipes_with_deepseek(ingredients):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ—Ü–µ–ø—Ç—ã —á–µ—Ä–µ–∑ DeepSeek API"""
    headers = {
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
        "Content-Type": "application/json"
    }

    prompt = (
        f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 3 –ø—Ä–æ—Å—Ç—ã—Ö —Ä–µ—Ü–µ–ø—Ç–∞ —Ç–æ–ª—å–∫–æ –∏–∑ —ç—Ç–∏—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤: {', '.join(ingredients)}.\n"
        "–î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞ —É–∫–∞–∂–∏:\n"
        "1. –ù–∞–∑–≤–∞–Ω–∏–µ (–º–∞–∫—Å–∏–º—É–º 5 —Å–ª–æ–≤)\n"
        "2. –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (—Ç–æ–ª—å–∫–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ)\n"
        "3. –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö\n"
        "4. –ö—Ä–∞—Ç–∫—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é (3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)\n\n"
        "–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ (–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤):\n"
        "1. –ù–∞–∑–≤–∞–Ω–∏–µ\n"
        "‚Ä¢ –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: ...\n"
        "‚Ä¢ –í—Ä–µ–º—è: ... –º–∏–Ω\n"
        "‚Ä¢ –†–µ—Ü–µ–ø—Ç: ...\n\n"
    )

    response = requests.post(
        "https://api.deepseek.com/v1/chat/completions",
        headers=headers,
        json={
            "model": "deepseek-chat",
            "messages": [{"role": "user", "content": prompt}],
            "temperature": 0.7
        }
    )

    if response.status_code != 200:
        raise Exception(f"API Error: {response.text}")

    return response.json()["choices"][0]["message"]["content"]


@bot.message_handler(func=lambda message: message.text == "üßë‚Äçüç≥ –ß—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å?")
def ask_for_ingredients(message):
    bot.reply_to(message,
                 "üìù –ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
                 "–ü—Ä–∏–º–µ—Ä: <i>—è–π—Ü–∞, –º–æ–ª–æ–∫–æ, –º—É–∫–∞, —Å—ã—Ä</i>",
                 parse_mode="HTML"
                 )
    bot.register_next_step_handler(message, handle_ingredients_list)


def handle_ingredients_list(message):
    try:
        ingredients = [x.strip() for x in message.text.split(',') if x.strip()]

        if len(ingredients) < 2:
            raise ValueError("–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞")

        typing_msg = bot.send_message(message.chat.id, "üß† –ü—Ä–∏–¥—É–º—ã–≤–∞—é —Ä–µ—Ü–µ–ø—Ç—ã...")

        recipes = generate_recipes_with_deepseek(ingredients)

        response = f"üç≥ <b>–†–µ—Ü–µ–ø—Ç—ã –∏–∑ {', '.join(ingredients)}:</b>\n\n{recipes}"

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏—è" –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        bot.delete_message(message.chat.id, typing_msg.message_id)
        bot.reply_to(message, response, parse_mode="HTML")

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(func=lambda message: message.text == "üìã –ú–µ–Ω—é")
def show_menu(message):
    keyboard = create_main_keyboard()
    bot.reply_to(message, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)

@bot.message_handler(commands=['diary'])
def show_diary_menu(message):
    today = datetime.now()
    marked_dates = get_dates_with_entries(message.chat.id)

    markup = generate_calendar(today.year, today.month, marked_dates)

    bot.send_message(
        message.chat.id,
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π:",
        reply_markup=markup
    )


@bot.message_handler(func=lambda message: message.text == "üçΩ –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è")
def show_today_summary(message):
    today_stats = get_today_summary(message.chat.id)

    if today_stats['calories'] == 0:
        bot.reply_to(message, "–°–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ üçΩ")
        return

    response = (
        "üìä <b>–°—ä–µ–¥–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n"
        f"üî• <b>–ö–∞–ª–æ—Ä–∏–∏:</b> {today_stats['calories']:.0f} –∫–∫–∞–ª\n"
        f"ü•© <b>–ë–µ–ª–∫–∏:</b> {today_stats['protein']:.1f}–≥\n"
        f"üßà <b>–ñ–∏—Ä—ã:</b> {today_stats['fat']:.1f}–≥\n"
        f"üçû <b>–£–≥–ª–µ–≤–æ–¥—ã:</b> {today_stats['carbs']:.1f}–≥\n\n"
        "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã üì∏"
    )

    bot.reply_to(message, response, parse_mode="HTML")

@bot.message_handler(func=lambda message: message.text in ["‚ùì –ü–æ–º–æ—â—å", "/help"])
def handle_help(message):
    send_welcome(message)

@bot.message_handler(func=lambda message: message.text in ["üìú –î–Ω–µ–≤–Ω–∏–∫", "/diary"])
def handle_diary(message):
    show_diary_menu(message)

@bot.callback_query_handler(func=lambda call: call.data.startswith('day_'))
def handle_day_selection(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–Ω—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ"""
    date_str = call.data.split('_')[1]
    show_day_entries(call.message.chat.id, date_str)
    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('month_'))
def handle_month_change(call):
    _, year, month = call.data.split('_')
    year = int(year)
    month = int(month)
    marked_dates = get_dates_with_entries(call.message.chat.id)

    markup = generate_calendar(year, month, marked_dates)

    bot.edit_message_reply_markup(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=markup
    )
    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: call.data == 'back_to_calendar')
def handle_back_to_calendar(call):
    today = datetime.now()
    marked_dates = get_dates_with_entries(call.message.chat.id)

    markup = generate_calendar(today.year, today.month, marked_dates)

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π:",
        reply_markup=markup
    )
    bot.answer_callback_query(call.id)


@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    try:
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        photo_path = f"temp_{message.chat.id}.jpg"
        with open(photo_path, 'wb') as f:
            f.write(downloaded_file)

        # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –µ–¥—ã
        logmeal_data = analyze_photo_with_logmeal(photo_path)
        os.remove(photo_path)

        if 'error' in logmeal_data:
            raise Exception(logmeal_data['error'])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        if logmeal_data.get('prob', 1.0) < 0.5:  # –ï—Å–ª–∏ prob < 50%
            markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.row(
                telebot.types.KeyboardButton("üì∏ –°–¥–µ–ª–∞—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ"),
                telebot.types.KeyboardButton("‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")
            )

            bot.reply_to(message,
                         f"ü§î –Ø –Ω–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —ç—Ç–æ ({translate_to_ru(logmeal_data['food_name'])})\n"
                         "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {:.0f}%\n\n"
                         "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é:".format(
                             logmeal_data['prob'] * 100
                         ),
                         reply_markup=markup
                         )
            return

        food_name = logmeal_data['food_name']
        nutrition_data = get_nutritionix_data(food_name)

        if not nutrition_data:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")

        user_food_data[message.chat.id] = {
            'food_name': food_name,
            'nutrition_per_100g': nutrition_data,
            'photo_id': message.photo[-1].file_id
        }

        bot.reply_to(message,
                     f"üç¥ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {translate_to_ru(food_name)} "
                     f"(—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {logmeal_data['prob'] * 100:.0f}%)\n"
                     "üìù –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ø–æ—Ä—Ü–∏–∏ –≤ –≥—Ä–∞–º–º–∞—Ö:"
                     )

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        bot.register_next_step_handler(message, process_portion_size)

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(func=lambda message: message.text == "üì∏ –°–¥–µ–ª–∞—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ")
def ask_for_new_photo(message):
    bot.reply_to(message, "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –µ–¥—ã (–ª—É—á—à–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ, –∫—Ä—É–ø–Ω—ã–π –ø–ª–∞–Ω)")


@bot.message_handler(func=lambda message: message.text in ["‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"])
def ask_for_food_name(message):
    bot.reply_to(message,
                 "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–ª–∏ –±–ª—é–¥–∞:\n"
                 "–ü—Ä–∏–º–µ—Ä: <i>–±–∞–Ω–∞–Ω, –æ–≤—Å—è–Ω–∞—è –∫–∞—à–∞, –∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞</i>",
                 parse_mode="HTML"
                 )
    bot.register_next_step_handler(message, handle_manual_input)


def handle_manual_input(message):
    try:
        food_name = translate_to_en(message.text.strip())
        if not food_name:
            raise ValueError("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

        nutrition_data = get_nutritionix_data(food_name)

        if not nutrition_data:
            markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("‚úçÔ∏è –£—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å", "üìã –ú–µ–Ω—é")

            bot.reply_to(message,
                         f"üîç –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è '{translate_to_ru(food_name)}'\n"
                         "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ:",
                         reply_markup=markup
                         )
            bot.register_next_step_handler(message, handle_retry_input)
            return

        user_food_data[message.chat.id] = {
            'food_name': translate_to_ru(food_name),
            'nutrition_per_100g': nutrition_data
        }

        bot.reply_to(message,
                     f"üç¥ –ù–∞–π–¥–µ–Ω–æ: {translate_to_ru(food_name)}\n"
                     "üìù –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ø–æ—Ä—Ü–∏–∏ –≤ –≥—Ä–∞–º–º–∞—Ö:"
                     )
        bot.register_next_step_handler(message, process_portion_size)

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


def handle_retry_input(message):
    if message.text == "‚úçÔ∏è –£—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å":
        ask_for_food_name(message)
    else:
        show_menu(message)

def process_portion_size(message):
    try:
        chat_id = message.chat.id
        portion_grams = float(message.text)

        if portion_grams <= 0:
            raise ValueError("–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        food_info = user_food_data.get(chat_id)
        if not food_info:
            raise Exception("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞")

        # –†–∞—Å—á–µ—Ç –ö–ë–ñ–£
        nutrition = calculate_nutrition(portion_grams, food_info['nutrition_per_100g'])

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = format_nutrition_response(
            food_info['food_name'],
            nutrition,
            portion_grams
        )

        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(telebot.types.InlineKeyboardButton(
            "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
            callback_data=f"save_{portion_grams}"
        ))

        bot.send_message(chat_id, response, reply_markup=markup)

    except ValueError:
        bot.reply_to(message, "üî¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 200)")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@bot.callback_query_handler(func=lambda call: call.data.startswith('save_'))
def handle_save(call):
    try:
        chat_id = call.message.chat.id
        portion_grams = float(call.data.split('_')[1])
        food_info = user_food_data.get(chat_id)

        if not food_info:
            bot.answer_callback_query(call.id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞")
            return

        save_to_diary(
            chat_id=chat_id,
            food_name=food_info['food_name'],
            portion_grams=portion_grams,
            nutrition_data=calculate_nutrition(portion_grams, food_info['nutrition_per_100g']),
            photo_id=food_info.get('photo_id')
        )

        bot.answer_callback_query(call.id, "‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫!")
        bot.send_message(chat_id, "üçΩ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫ (/diary)")

    except Exception as e:
        bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


# --- –ó–∞–ø—É—Å–∫ --- #
if __name__ == '__main__':
    print("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.infinity_polling()